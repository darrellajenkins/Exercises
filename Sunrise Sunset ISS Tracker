import datetime
from datetime import timezone
import time
import requests
import smtplib

currenttime = datetime.datetime.now()  # This is local datetime.
curr_hour = currenttime.hour  # This is local hour. We will not use it in this program.

# We need the UTC hour to be able to compare with the data from the sunrise/sunset API which is in UTC format.
curr_utc_hour = datetime.datetime.now(timezone.utc).hour

MY_LAT = 48.128471
MY_LNG = -123.474068


def iss_is_close():
    response = requests.get(url="https://api.wheretheiss.at/v1/satellites/25544")
    response.raise_for_status()
    data = response.json()
    latitude = float(data["latitude"])
    longitude = float(data["longitude"])
    if MY_LAT in range(int(latitude) - 6, int(latitude) + 6) and MY_LNG in range(int(longitude) - 6, int(longitude) + 6):
        return True
        # alternative function for iss sat within range of your location:  if lat-5 <= iss_lat <= lat+5 and lng-5 <= iss_lng <= lng+5

# iss_position = (latitude, longitude). Standard notation is always lat first then lon.
# You can map it out on Google Maps in the address field but may need to adjust numbers for negative or positive depending on E/W.


def military():
    """Displays time data in military time format in conjuncion with the
    style variable which requires user to make a choice."""
    parameters = {
            "lat": 48.128471,
            "lng": -123.474068,
            "formatted": 0  # TYPE 0 FOR MILITARY TIME ACCORDING TO THE API
    }
    response = requests.get(url="https://api.sunrise-sunset.org/json", params=parameters)
    response.raise_for_status()
    data = response.json()
    return data

def standard():
    """Converts time data to standard display format with AM/PM in conjuncion
    with the style variable which requires user to make a choice."""
    parameters = {
            "lat": 48.128471,
            "lng": -123.474068,
            "formatted": 1  # TYPE 1 FOR STANDARD TIME ACCORDING TO THE API
    }
    response = requests.get(url="https://api.sunrise-sunset.org/json", params=parameters)
    response.raise_for_status()
    data = response.json()
    return data

def std_after_sunset():
    """Compares standard format time to military time from datetime module, but only
    after the program has printed out the time in standard display format."""
    parameters = {
            "lat": 48.128471,
            "lng": -123.474068,
            "formatted": 0
    }
    response = requests.get(url="https://api.sunrise-sunset.org/json", params=parameters)
    response.raise_for_status()
    data_C = response.json()
    mt_sunrise = data_C["results"]["sunrise"]
    mt_sunset = data_C["results"]["sunset"]
    TRise = mt_sunrise.find("T")
    comp_mt_rise = int(mt_sunrise[TRise + 1:13])  # Capturing only the hour digits
    TSet = mt_sunset.find("T")
    comp_mt_set = int(mt_sunset[TSet + 1:13])  # Capturing only the hour digits
    return comp_mt_rise, comp_mt_set


def nighttime():
    style = input("Military or Standard Time? Type 'm' or 's: ").lower()
    if style == 'm':
        data_M = military()
        mt_sunrise = data_M["results"]["sunrise"]
        mt_sunset = data_M["results"]["sunset"]
        TRise = mt_sunrise.find("T")
        new_mt_rise = mt_sunrise[TRise + 1:19]
        TSet = mt_sunset.find("T")
        new_mt_set = mt_sunset[TSet + 1:19]
        print(f"\nSeattle, WA: (-8 hrs PST or -7 PDT)\n\n\tSunrise occurs at:   {new_mt_rise} UTC")
        print(f"\tSunset occurs at:    {new_mt_set} UTC")
        if curr_utc_hour > int(mt_sunset[TSet + 1:13]) and curr_utc_hour < int(mt_sunrise[TRise + 1:13]):
            print('\033[33m' + "\n\tIt is currently after sunset.")
            return True
        else:
            print('\033[36m' + "\n\tIt is daytime.")
    elif style == 's':  # Prints std display format first, then compares in military time.  Determines if after sunset and thus dark.
        data_S = standard()
        st_sunrise = data_S["results"]["sunrise"]
        st_sunset = data_S["results"]["sunset"]
        # Next line allows comparing currenttime to military time, since the datetime module only provides the time in military time format.
        compare_only = std_after_sunset()  # Stores data grabbed as a tuple 15, 0 (rise / set)
        print(f"\nSeattle, WA: (-8 hrs PST or -7 PDT)\n\n\tSunrise occurs at:   {st_sunrise} UTC")
        print(f"\tSunset occurs at:    {st_sunset} UTC")
        if curr_utc_hour > int(compare_only[1]) and curr_utc_hour < int(compare_only[0]):  # > sunset[1] or < sunrise[0]
            print('\033[33m' + "\n\tIt is currently after sunset.")
            return True
        else:
            print('\033[36m' + "\n\tIt is daytime.")

nighttime()

while True:
    time.sleep(60)  # Run the program at night and this will make it check every 60 seconds
    if iss_is_close() and nighttime():
        print('\033[31m' + "The ISS is overhead!")
        my_gmail = "..."
        password = "***"
        connection3 = smtplib.SMTP("smtp.gmail.com")
        connection3.starttls() 
        connection3.login(user=my_gmail, password=password)
        connection3.sendmail(from_addr=my_gmail, to_addrs="***@gmail.com",
                             msg=f"Subject:ISS\n\nISS is overhead!")
        connection3.close()
        
